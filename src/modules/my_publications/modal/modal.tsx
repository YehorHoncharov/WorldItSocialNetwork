import React, { useEffect, useState } from "react";
import {
	Modal,
	Pressable,
	View,
	Text,
	StyleSheet,
	TouchableOpacity,
	Image,
	TextInput,
	ScrollView,
	Alert,
	ActivityIndicator,
} from "react-native";
import Cross from "../../../shared/ui/icons/cross";
import SendArrow from "../../../shared/ui/icons/send-arrow";
import { Input } from "../../../shared/ui/input";
import {
	launchImageLibraryAsync,
	requestMediaLibraryPermissionsAsync,
} from "expo-image-picker";
import { POST } from "../../../shared/api/post";
import AsyncStorage from "@react-native-async-storage/async-storage";
import { useUserContext } from "../../auth/context/user-context";
import DropDownPicker from "react-native-dropdown-picker";
import { usePosts } from "../../post/hooks/use-get-post";
import { API_BASE_URL } from "../../../settings";

interface Props {
	modalVisible: boolean;
	changeVisibility: () => void;
}

interface TagItem {
	label: string;
	value: string;
}

interface IPostImg {
	id: number;
	url: string;
	userPostId: number;
}

export function MyPublicationModal({ modalVisible, changeVisibility }: Props) {
	const [name, setName] = useState("");
	const [theme, setTheme] = useState("");
	const [text, setText] = useState("");
	const [links, setLinks] = useState("");
	const [images, setImages] = useState<IPostImg[]>([]);
	const [imageDimensions, setImageDimensions] = useState<{
		[key: string]: { width: number; height: number };
	}>({});
	const [tokenUser, setTokenUser] = useState<string>("");
	const [isLoading, setIsLoading] = useState(false);
	const { user } = useUserContext();
	const [open, setOpen] = useState(false);
	const [value, setValue] = useState<string[]>([]);
	const [items, setItems] = useState<TagItem[]>([
		{ label: "–í—ñ–¥–ø–æ—á–∏–Ω–æ–∫", value: "#–≤—ñ–¥–ø–æ—á–∏–Ω–æ–∫" },
		{ label: "–ù–∞—Ç—Ö–Ω–µ–Ω–Ω—è", value: "#–Ω–∞—Ç—Ö–Ω–µ–Ω–Ω—è" },
		{ label: "–ñ–∏—Ç—Ç—è", value: "#–∂–∏—Ç—Ç—è" },
		{ label: "–ü—Ä–∏—Ä–æ–¥–∞", value: "#–ø—Ä–∏—Ä–æ–¥–∞" },
		{ label: "–°–ø–æ–∫—ñ–π", value: "#—Å–ø–æ–∫—ñ–π" },
		{ label: "–ß–∏—Ç–∞–Ω–Ω—è", value: "#—á–∏—Ç–∞–Ω–Ω—è" },
		{ label: "–ì–∞—Ä–º–æ–Ω—ñ—è", value: "#–≥–∞—Ä–º–æ–Ω—ñ—è" },
		{ label: "–ú—É–∑–∏–∫–∞", value: "#–º—É–∑–∏–∫–∞" },
		{ label: "–§—ñ–ª—å–º–∏", value: "#—Ñ—ñ–ª—å–º–∏" },
		{ label: "–ü–æ–¥–æ—Ä–æ–∂—ñ", value: "#–ø–æ–¥–æ—Ä–æ–∂—ñ" },
	]);
	const { refetch } = usePosts();

	const getToken = async (): Promise<string> => {
		const token = await AsyncStorage.getItem("tokenStorage");
		return token || "";
	};

	useEffect(() => {
		getToken().then(setTokenUser);
	}, []);

	const handleSubmit = async () => {

		if (!name.trim() || !theme.trim() || !text.trim()) {
			Alert.alert(
				"–ü–æ–º–∏–ª–∫–∞",
				"–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å —É—Å—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è"
			);
			return;
		}
		if (!user) {
			Alert.alert(
				"–£–ø—Å...",
				"–°—Ö–æ–∂–µ, –≤–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ üòû, —Ç–æ–º—É –Ω–µ –º–æ–∂–µ—Ç–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ—Å—Ç üôÑ"
			);
			return;
		}
		if (value.length > 10) {
			Alert.alert("–ü–æ–º–∏–ª–∫–∞", "–ú–∞–∫—Å–∏–º—É–º 10 —Ç–µ–≥—ñ–≤");
			return;
		}
		if (links && !isValidUrl(links)) {
			Alert.alert("–ü–æ–º–∏–ª–∫–∞", "–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è");
			return;
		}

		const sanitizedTags = value
			.map((tag) => tag.trim())
			.filter((tag) => tag.length > 0 && tag.length <= 50);

		if (sanitizedTags.length !== value.length) {
			Alert.alert("–ü–æ–º–∏–ª–∫–∞", "–¢–µ–≥–∏ –º–∞—é—Ç—å –±—É—Ç–∏ –Ω–µ –¥–æ–≤—à–∏–º–∏ –∑–∞ 50 —Å–∏–º–≤–æ–ª—ñ–≤");
			return;
		}

		const formattedImages =
			images.length > 0
				? { create: images.map((img) => ({ url: img.url })) }
				: undefined;

		setIsLoading(true);
		try {
			console.log("[refetch] –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞", {
				name: name.trim(),
				theme: theme.trim(),
				text: text.trim(),
				links: links.trim() || undefined,
				tags: sanitizedTags,
				images: formattedImages,
				authorId: user.id,
			});
			const response = await POST({
				endpoint: `${API_BASE_URL}/posts/create`,
				headers: {
					"Content-Type": "application/json",
					Authorization: `Bearer ${tokenUser}`,
				},
				token: tokenUser,
				body: {
					name: name.trim(),
					theme: theme.trim(),
					text: text.trim(),
					links: links.trim() || undefined,
					tags: sanitizedTags.length > 0 ? sanitizedTags : undefined,
					images: formattedImages,
					authorId: user.id,
				},
			});

			if (response.status === "success") {
				setName("");
				setTheme("");
				setText("");
				setLinks("");
				setImages([]);
				setValue([]);
				setItems([
					{ label: "–í—ñ–¥–ø–æ—á–∏–Ω–æ–∫", value: "#–≤—ñ–¥–ø–æ—á–∏–Ω–æ–∫" },
					{ label: "–ù–∞—Ç—Ö–Ω–µ–Ω–Ω—è", value: "#–Ω–∞—Ç—Ö–Ω–µ–Ω–Ω—è" },
					{ label: "–ñ–∏—Ç—Ç—è", value: "#–∂–∏—Ç—Ç—è" },
					{ label: "–ü—Ä–∏—Ä–æ–¥–∞", value: "#–ø—Ä–∏—Ä–æ–¥–∞" },
					{ label: "–°–ø–æ–∫—ñ–π", value: "#—Å–ø–æ–∫—ñ–π" },
					{ label: "–ß–∏—Ç–∞–Ω–Ω—è", value: "#—á–∏—Ç–∞–Ω–Ω—è" },
					{ label: "–ì–∞—Ä–º–æ–Ω—ñ—è", value: "#–≥–∞—Ä–º–æ–Ω—ñ—è" },
					{ label: "–ú—É–∑–∏–∫–∞", value: "#–º—É–∑–∏–∫–∞" },
					{ label: "–§—ñ–ª—å–º–∏", value: "#—Ñ—ñ–ª—å–º–∏" },
					{ label: "–ü–æ–¥–æ—Ä–æ–∂—ñ", value: "#–ø–æ–¥–æ—Ä–æ–∂—ñ" },
				]);
				changeVisibility();
				Alert.alert("–£—Å–ø—ñ—Ö", "–ü—É–±–ª—ñ–∫–∞—Ü—ñ—é —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ");
			} else {
				Alert.alert(
					"–ü–æ–º–∏–ª–∫–∞",
					response.message || "–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—é"
				);
			}
		} catch (err) {
			console.error("[refetch] –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞:", err);
			Alert.alert(
				"–ü–æ–º–∏–ª–∫–∞",
				`–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—é: ${
					err instanceof Error ? err.message : "–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞"
				}`
			);
		} finally {
			setIsLoading(false);
		}
	};

	const handleSubmitWithRefetch = async () => {
		await handleSubmit();
		console.log(
			"[refetch] –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞–ª —É—Å–ø–µ—à–Ω—ã–º, –∑–∞–ø—É—Å–∫ refetch"
		);
		const updatedPosts = await refetch();
		console.log(
			`[refetch] –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç ${
				updatedPosts?.length || 0
			} –ø–æ—Å—Ç–æ–≤`
		);
	};

	async function onSearch() {
		try {
			const { status } = await requestMediaLibraryPermissionsAsync();
			if (status !== "granted") {
				Alert.alert(
					"–î–æ–∑–≤—ñ–ª –Ω–µ –Ω–∞–¥–∞–Ω–æ",
					"–î–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω—å –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –Ω–∞–¥–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ –≥–∞–ª–µ—Ä–µ—ó"
				);
				return;
			}

			const result = await launchImageLibraryAsync({
				mediaTypes: ["images"],
				allowsMultipleSelection: true,
				quality: 0.8,
				allowsEditing: false,
				base64: true,
			});

			if (!result.canceled && result.assets) {
				const allowedFormats = ["jpeg", "png", "gif"];
				const maxSizeInBytes = 5 * 1024 * 1024; // 5 MB

				const newImages = await Promise.all(
					result.assets
						.filter((asset) => {
							const type =
								asset.mimeType?.split("/")[1]?.toLowerCase() ||
								"";
							return (
								asset.base64 && allowedFormats.includes(type)
							);
						})
						.map(async (asset, index) => {
							const base64String = asset.base64!;
							const estimatedSizeInBytes =
								(base64String.length * 3) / 4;
							if (estimatedSizeInBytes > maxSizeInBytes) {
								Alert.alert(
									"–ü–æ–º–∏–ª–∫–∞",
									`–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–µ (–º–∞–∫—Å. 5 –ú–ë)`
								);
								return null;
							}
							const imageUrl = `data:image/${
								asset.mimeType?.split("/")[1] || "jpeg"
							};base64,${base64String}`;
							console.log(
								"[MyPublicationModal] –î–æ–¥–∞–Ω–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è:",
								imageUrl.slice(0, 50),
								"..."
							);

							const dimensions = await new Promise<{
								width: number;
								height: number;
							}>((resolve) => {
								Image.getSize(
									imageUrl,
									(width, height) =>
										resolve({ width, height }),
									(error) => {
										console.error(
											`[MyPublicationModal] –ü–æ–º–∏–ª–∫–∞ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ä–æ–∑–º—ñ—Ä—ñ–≤: ${error}`
										);
										resolve({ width: 150, height: 150 }); // –ó–∞–ø–∞—Å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç
									}
								);
							});

							const imageKey = `${Date.now() + index}`;
							setImageDimensions((prev) => ({
								...prev,
								[imageKey]: dimensions,
							}));

							return {
								id: Date.now() + index,
								url: imageUrl,
								userPostId: 0,
							};
						})
				);

				const filteredImages = newImages.filter(
					(img): img is IPostImg => img !== null
				);

				if (images.length + filteredImages.length > 10) {
					Alert.alert(
						"–£–≤–∞–≥–∞",
						"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω—å - 10"
					);
					return;
				}

				setImages((prev) => {
					const updatedImages = [...prev, ...filteredImages];
					console.log(
						"[MyPublicationModal] –û–Ω–æ–≤–ª–µ–Ω–∏–π —Å–ø–∏—Å–æ–∫ –∑–æ–±—Ä–∞–∂–µ–Ω—å:",
						updatedImages
					);
					return updatedImages;
				});
			} else if (result.canceled) {
				Alert.alert("–°–∫–∞—Å–æ–≤–∞–Ω–æ", "–í–∏–±—ñ—Ä –∑–æ–±—Ä–∞–∂–µ–Ω—å –±—É–ª–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ");
			}
		} catch (error) {
			console.error(
				"[MyPublicationModal] –ü–æ–º–∏–ª–∫–∞ –≤–∏–±–æ—Ä—É –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è:",
				error
			);
			Alert.alert(
				"–ü–æ–º–∏–ª–∫–∞",
				`–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–±—Ä–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: ${
					error instanceof Error ? error.message : "–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞"
				}`
			);
		}
	}

	const removeImage = (index: number) => {
		setImages((prev) => prev.filter((_, i) => i !== index));
	};

	const isValidUrl = (url: string): boolean => {
		const urlPattern = /^(https?:\/\/)([\w.-]+)\.([a-z]{2,})(\/.*)?$/i;
		return urlPattern.test(url);
	};

	const renderImages = () => {
		if (images.length === 0) {
			return <Text style={styles.noImagesText}>–î–æ–¥–∞–π—Ç–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è</Text>;
		}

		return (
			<View style={styles.imageGrid}>
				{images.map((img, idx) => {
					const isValidImage =
						img.url.startsWith("data:image/") ||
						img.url.startsWith("http");
					if (!isValidImage) {
						console.error(
							`[ChangePostModal] –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π URL –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: ${img.url}`
						);
						return null;
					}
					return (
						<View
							key={`image-${img.id}-${idx}`}
							style={styles.imageContainer}
						>
							<Image
								source={{ uri: img.url }}
								style={styles.imageAdded}
								resizeMode="cover"
								onError={(e) => {
									console.error(
										`[ChangePostModal] –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: ${img.url}`,
										e.nativeEvent
									);
								}}
								onLoad={() =>
									console.log(
										`[ChangePostModal] –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: ${img.url.slice(
											0,
											20
										)}...`
									)
								}
							/>
							<TouchableOpacity
								style={styles.removeImageButton}
								onPress={() => removeImage(idx)}
							>
								<Image
									source={require("../../../shared/ui/images/trash.png")}
									width={20}
									height={20}
									style={{
										width: 22,
										height: 22,
									}}
								/>
							</TouchableOpacity>
						</View>
					);
				})}
			</View>
		);
	};

	return (
		<Modal
		
			animationType="fade"
			transparent={true}
			visible={modalVisible}
			onRequestClose={changeVisibility}
		>
			<View style={styles.centeredView}>
				<View style={styles.modalView}>
					<View style={styles.header}>
						<Text style={styles.modalTitle}>
							–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó
						</Text>
						<Pressable onPress={changeVisibility}>
							<Cross style={{ width: 15, height: 15 }} />
						</Pressable>
					</View>
					<ScrollView
						overScrollMode="never"
						style={styles.scrollArea}
						keyboardShouldPersistTaps="handled"
					>
						<View style={styles.form}>
							<Input
								style={{ width: "100%" }}
								label="–ù–∞–∑–≤–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó"
								placeholder="–ù–∞–ø–∏—à—ñ—Ç—å –Ω–∞–∑–≤—É –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó"
								value={name}
								onChangeText={setName}
								maxLength={100}
							/>
							<Input
								style={{ width: "100%" }}
								label="–¢–µ–º–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó"
								placeholder="–ù–∞–ø–∏—à—ñ—Ç—å —Ç–µ–º—É –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó"
								value={theme}
								onChangeText={setTheme}
								maxLength={60}
							/>
							<View>
								<TextInput
									style={styles.textArea}
									placeholder="–í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó"
									value={text}
									onChangeText={setText}
									multiline
									maxLength={2000}
									textAlignVertical="top"
									autoCapitalize="sentences"
								/>
							</View>
							<Input
								style={{ width: "100%" }}
								label="–ü–æ—Å–∏–ª–∞–Ω–Ω—è"
								placeholder="–í–∞—à–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è..."
								value={links}
								onChangeText={setLinks}
								keyboardType="url"
							/>
							<View style={{ width: "100%", zIndex: 1000 }}>
								<DropDownPicker
									open={open}
									value={value}
									items={items}
									setOpen={setOpen}
									setValue={setValue}
									setItems={setItems}
									multiple={true}
									min={0}
									max={10}
									mode="BADGE"
									badgeDotColors={["#543C52"]}
									badgeStyle={{
										backgroundColor: "#E9E5EE",
										padding: 4,
										borderRadius: 8,
										minHeight: 20,
									}}
									placeholder="–û–±–µ—Ä—ñ—Ç—å –∞–±–æ –¥–æ–¥–∞–π—Ç–µ —Ç–µ–≥–∏"
									searchable={true}
									searchPlaceholder="–ü–æ—à—É–∫ –∞–±–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ–≥—É..."
									listMode="SCROLLVIEW"
									scrollViewProps={{
										nestedScrollEnabled: true,
									}}
									addCustomItem={true}
									maxHeight={200}
									zIndex={1000}
									dropDownContainerStyle={{
										maxHeight: 250,
										borderColor: "#543C52",
										zIndex: 1000,
										flex: 1,
									}}
									onChangeValue={(newValue) => {
										console.log(
											"[ChangePostModal] Selected tags:",
											newValue
										);
									}}
									onChangeSearchText={(text) => {
										const sanitizedText = text.trim();
										if (
											sanitizedText &&
											!items.some(
												(item) =>
													item.value === sanitizedText
											) &&
											sanitizedText.length <= 50
										) {
											setItems((prev) => [
												...prev,
												{
													label: sanitizedText,
													value: sanitizedText,
												},
											]);
										}
									}}
								/>
							</View>
							<View
								style={{
									flexDirection: "row",
									flexWrap: "wrap",
									gap: 8,
									marginTop: 5,
								}}
							>
								{value.map((tag, index) => (
									<View
										key={`${tag}-${index}`}
										style={{
											backgroundColor: "#E9E5EE",
											paddingHorizontal: 12,
											paddingVertical: 6,
											borderRadius: 15,
											flexDirection: "row",
											alignItems: "center",
											gap: 8,
										}}
									>
										<Text
											style={{
												color: "#543C52",
												fontSize: 14,
											}}
										>
											{tag}
										</Text>
										<TouchableOpacity
											onPress={() =>
												setValue((prev) =>
													prev.filter(
														(_, i) => i !== index
													)
												)
											}
										>
											<Text
												style={{
													color: "#543C52",
													fontSize: 14,
												}}
											>
												√ó
											</Text>
										</TouchableOpacity>
									</View>
								))}
							</View>
						</View>
						<Text style={styles.imageSectionTitle}>
							–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è ({images.length}/10)
						</Text>
						{renderImages()}
						<View style={styles.actions}>
							<TouchableOpacity
								style={{
									alignItems: "center",
								}}
								onPress={onSearch}
							>
								<Image
									source={require("../../../shared/ui/images/pictures-modal.png")}
									style={styles.icon}
								/>
							</TouchableOpacity>
							<TouchableOpacity>
								<Image
									source={require("../../../shared/ui/images/smile-modal.png")}
									style={styles.icon}
								/>
							</TouchableOpacity>
							<TouchableOpacity
								style={[
									styles.submitButton,
									isLoading && { opacity: 0.7 },
								]}
								onPress={handleSubmitWithRefetch}
								disabled={isLoading}
							>
								{isLoading ? (
									<ActivityIndicator color="#fff" />
								) : (
									<>
										<Text style={styles.submitText}>
											–ü—É–±–ª—ñ–∫–∞—Ü—ñ—è
										</Text>
										<SendArrow
											style={{ width: 20, height: 20 }}
										/>
									</>
								)}
							</TouchableOpacity>
						</View>
					</ScrollView>
				</View>
			</View>
		</Modal>
	);
}

const styles = StyleSheet.create({
	centeredView: {
		flex: 1,
		justifyContent: "center",
		backgroundColor: "rgba(0, 0, 0, 0.5)",
	},
	modalView: {
		width: "100%",
		maxHeight: "80%",
		backgroundColor: "white",
		borderRadius: 20,
		padding: 15,
		shadowColor: "#000",
		shadowOffset: { width: 0, height: 2 },
		shadowOpacity: 0.25,
		shadowRadius: 4,
		elevation: 5,
	},
	header: {
		flexDirection: "row",
		justifyContent: "space-between",
		alignItems: "center",
		marginBottom: 16,
	},
	modalTitle: {
		fontSize: 24,
		fontWeight: "500",
		color: "#070A1C",
	},
	form: {
		width: "100%",
		gap: 10,
		alignItems: "center",
		justifyContent: "center",
	},
	textArea: {
		width: "100%",
		minHeight: 120,
		minWidth: 300,
		padding: 16,
		borderWidth: 1,
		borderColor: "#CDCED2",
		borderRadius: 10,
		fontSize: 16,
		backgroundColor: "#f9f9f9",
	},
	actions: {
		gap: 16,
		marginTop: 20,
		flexDirection: "row",
		alignItems: "center",
		justifyContent: "flex-end",
	},
	addImageButton: {
		backgroundColor: "#f0f0f0",
		padding: 12,
		borderRadius: 8,
		alignItems: "center",
		borderWidth: 1,
		borderColor: "#ddd",
	},
	addImageText: {
		color: "#333",
		fontWeight: "500",
		fontSize: 16,
	},
	submitButton: {
		flexDirection: "row",
		alignItems: "center",
		justifyContent: "center",
		backgroundColor: "#543C52",
		paddingHorizontal: 15,
		paddingVertical: 10,
		borderRadius: 1234,
		gap: 8,
		minWidth: 130,
	},
	submitText: {
		color: "white",
		fontSize: 14,
		fontWeight: "500",
		flexShrink: 1,
	},
	scrollArea: {
		flexGrow: 1,
	},
	imageGrid: {
		flexDirection: "column",
		gap: 8,
	},
	imageContainer: {
		position: "relative",
		alignItems: "center",
		justifyContent: "center",
	},
	imageAdded: {
		width: "100%",
		height: 225,
		borderRadius: 16,
	},
	removeImageButton: {
		position: "absolute",
		top: 10,
		right: 10,
		backgroundColor: "white",
		width: 30,
		height: 30,
		borderRadius: 15,
		justifyContent: "center",
		alignItems: "center",
		borderWidth: 1,
		borderColor: "#543C52",
	},
	noImagesText: {
		fontSize: 16,
		color: "#666",
		textAlign: "center",
		marginVertical: 10,
	},
	imageSectionTitle: {
		fontSize: 16,
		fontWeight: "600",
		marginTop: 20,
		marginBottom: 10,
		color: "#333",
	},
	selectedTagsContainer: {
		flexDirection: "row",
		flexWrap: "wrap",
		marginTop: 10,
		gap: 8,
	},
	tag: {
		backgroundColor: "#EEE",
		borderRadius: 12,
		paddingHorizontal: 10,
		paddingVertical: 4,
		flexDirection: "row",
		alignItems: "center",
		gap: 8,
	},
	tagText: {
		color: "#333",
		fontSize: 14,
	},
	removeTagText: {
		color: "#333",
		fontSize: 14,
	},
	icon: {
		width: 40,
		height: 40,
	},
});
